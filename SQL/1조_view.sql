--● VIEW

--○ 지역 뷰 
CREATE OR REPLACE VIEW REGION_VIEW
AS
SELECT L.CITY, S.LOCAL,L.REGION_L_ID,S.REGION_S_ID
FROM REGION_L L RIGHT JOIN REGION_S S
        ON S.REGION_L_ID = L.REGION_L_ID;
--○ 카테고리 뷰 
CREATE OR REPLACE VIEW CATEGORY_VIEW
AS
SELECT L.L_CAT, S.S_CAT,L.CATEGORY_L_ID,S.CATEGORY_S_ID
FROM CATEGORY_L L RIGHT JOIN CATEGORY_S S
        ON S.CATEGORY_L_ID = L.CATEGORY_L_ID;

--○회원 뷰
CREATE OR REPLACE VIEW MEMBERINFO_VIEW
AS
SELECT M.MID, F.NAME, M.BDATE AS 가입일, M.LOGIN_DATE AS 마지막로그인날짜
, F.ID "회원정보코드", F.SSN "주민번호"
, EXTRACT(YEAR FROM SYSDATE) - 
    (DECODE(SUBSTR(F.SSN,7,1),'1', '19','2','19','20') || SUBSTR(F.SSN,1,2)) +1 "나이"
, F.EMAIL, F.TEL, F.PWD, F.NICKNAME "닉네임"
, FN_CATEGORY_NAME(M.MID) "관심 카테고리"
, FN_ADD_CATEGORY_NAME1(M.MID) "추가 카테고리1"
, FN_ADD_CATEGORY_NAME2(M.MID) "추가 카테고리2"
, FN_ADD_CATEGORY_NAME3(M.MID) "추가 카테고리3"
, FN_ADD_CATEGORY_NAME4(M.MID) "추가 카테고리4"
, FN_REGION_NAME(F.ID) "지역"
, FN_ADD_REGION_NAME1(F.ID) "추가 지역1"
, FN_ADD_REGION_NAME2(F.ID) "추가 지역2"
FROM MEMBER M JOIN MEMBERINFO F
ON M.MID = F.MID;


--회원 뷰2 (- 영어)
CREATE OR REPLACE VIEW MEMBERINFO_VIEW2
AS
SELECT M.MID, F.NAME, M.BDATE AS "JOINDATE", M.LOGIN_DATE
, F.ID , F.SSN ,F.URL
, EXTRACT(YEAR FROM SYSDATE) - 
    (DECODE(SUBSTR(F.SSN,7,1),'1', '19','2','19','20') || SUBSTR(F.SSN,1,2)) +1 AS "AGE"
, F.EMAIL, F.TEL, F.USERID, F.PWD, F.NICKNAME
, FN_CATEGORY_NAME(M.MID) AS "CATEGORYNAME"
, FN_ADD_CATEGORY_NAME1(M.MID) "CATEGORYNAME2"
, FN_ADD_CATEGORY_NAME2(M.MID) "CATEGORYNAME3"
, FN_ADD_CATEGORY_NAME3(M.MID) "CATEGORYNAME4"
, FN_ADD_CATEGORY_NAME4(M.MID) "CATEGORYNAME5"
, FN_REGION_NAME(F.ID) "REGIONNAME"
, FN_ADD_REGION_NAME1(F.ID) "REGIONNAME2"
, FN_ADD_REGION_NAME2(F.ID) "REGIONNAME3"
FROM MEMBER M JOIN MEMBERINFO F
ON M.MID = F.MID;

--○ 동아리 뷰 
CREATE OR REPLACE VIEW CLUB_VIEW 
AS
SELECT B.CID  -- 동아리ID
      ,B.TITLE  -- 동아리명
      ,B.CONTENT  --내용
      ,B.MAX  -- 최대인원
      ,B.URL  -- 사진경로
      ,B.MID   -- 동아리장 회원ID
      ,FN_MEMBER_NICKNAME(B.MID) AS NICKNAME -- 동아리장 닉네임
      ,B.PREOPENDATE 
      ,B.BDATE 
      ,RL.REGION_L_ID
      ,RL.CITY -- 시 이름
      ,B.REGION_S_ID
      ,S.LOCAL -- 군/구 이름
      ,CL.CATEGORY_L_ID
      ,CL.L_CAT -- 카테고리 대분류 명
      ,B.CATEGORY_S_ID
      ,CS.S_CAT -- 카테고리 소분류 명 
      ,B.AGELIMIT_ID
      ,B.LIMIT_ID
      ,FN_CLUB_MINAGE(B.MID) AS MIN_AGE --가입제한 최소나이
      ,FN_CLUB_MAXAGE(B.MID) AS MAX_AGE -- 가입제한 최대나이 
      ,ROUND(PREOPENDATE + 30 - SYSDATE) AS DAY -- 정식개설일 까지의 dday
      ,FN_CLUB_MEMBERCOUNT(B.CID) AS COUNT --현재 인원수
FROM CLUB B LEFT JOIN REGION_S S
        ON S.REGION_S_ID = B.REGION_S_ID
            LEFT JOIN REGION_L RL
            ON S.REGION_L_ID = RL.REGION_L_ID
                LEFT JOIN CATEGORY_S CS
                ON CS.CATEGORY_S_ID = B.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL
                ON CS.CATEGORY_L_ID = CL.CATEGORY_L_ID;


--○ 투표
SELECT B.B_ID, B.VOTE_ID, T.TYPE
, B.WRITER "발의자"
, B.CLUBMEM_ID "해당자"
, V.CLUBMEM_ID "투표자"
, V.PAC_ID "찬반코드"
, FN_PAC_NAME(V.PAC_ID)
, B.CNT "조회수"
, B.BDATE "발의일"
, B.TITLE 
, B.CONTENT
FROM VOTE_BOARD B
LEFT JOIN VOTE_TYPE T
ON B.VOTE_ID = T.VOTE_ID
    LEFT JOIN VOTER V
    ON V.B_ID = B.B_ID;


--○ 모집 - 운영진 투표발의
SELECT B.B_ID, B.CLUBMEM_ID "작성자", B.TITLE, B.CONTENT
, B.POSITION_ID "직위코드"
, FN_POSITION_NAME(B.POSITION_ID) "직위"
, B.BDATE "모집일"
, V.CLUBMEM_ID "신청자"
, V.BDATE "신청일"
, B.CNT
, M.MOTION_ID "투표발의코드"
, M.BDATE "투표발의일"
, E.CLUBMEM_ID "투표자"
FROM RECRUIT_BOARD B
LEFT JOIN MOTION_VOTE M
ON M.B_ID = B.B_ID
    LEFT JOIN VOLUNTEER V
    ON V.B_ID = B.B_ID
     LEFT JOIN EXE_VOTE E
     ON E.VOLUNTEER_ID = V.VOLUNTEER_ID;
     



--○ 모임 뷰
-- 모임에 참석한 인원들만 출력하는 뷰(불참인원 제외)
-- 불참에 여러 데이터 넣어도 잘 돌아가는지는 나중에 확인해봐야 알 것 같음.
SELECT B.BEE_ID, B.TYPE_ID, B.TITLE, B.CONTENT, TO_CHAR(B.BEE_TIME, 'YYYY-MM-DD HH24:MI:SS') "모임날짜"
--, B.WEATHER, B.LOCATION
, B.MIN "최소인원", B.MAX "제한인원", B.FEE "참가비", B.BDATE "작성일" 
--, "작성자"
, FN_CLUB_NAME(R.CLUBMEM_ID) "동아리"
, R.REQ_ID "모임신청코드"
, R.CLUBMEM_ID "신청자"
, R.BDATE "신청일"
FROM BEE B 
LEFT JOIN BEE_REQ R
ON B.BEE_ID = R.BEE_ID
WHERE R.REQ_ID NOT IN (SELECT REQ_ID
                       FROM ABSENT);


--○ 동아리            
SELECT C.CID "동아리 코드", C.MAX "최대 인원", C.CONTENT "내용", C.CATEGORY_S_ID "동아리 카테고리", RL.REGION_L_ID "지역(시) 코드", C.REGION_S_ID "지역(군/구) 코드"
, RL.CITY "지역 대분류", S.LOCAL "지역 세부"
, C.MID "동아리장코드", C.TITLE "동아리명", C.URL "대표사진경로", C.PREOPENDATE "가개설일", C.BDATE "정식개설일"
, C.LIMIT_ID "지역제한", C.AGELIMIT_ID "나이제한", J.JOIN_ID "가입신청코드"
, L.CLUBMEM_ID "회원목록코드", L.POSITION_ID "직위코드", P.NAME "직위명"
FROM CLUB C LEFT JOIN JOIN_CLUB J -- 동아리 + 가입 신청
ON C.CID = J.CID
    LEFT JOIN CLUBMEMBERLIST L    -- 동아리 + 가입 신청 + 동아리 회원목록
    ON J.JOIN_ID = L.JOIN_ID
        LEFT JOIN REGION_S S
        ON S.REGION_S_ID = C.REGION_S_ID
            LEFT JOIN REGION_L RL
            ON S.REGION_L_ID = RL.REGION_L_ID
                LEFT JOIN POSITION P
                ON L.POSITION_ID = P.POSITION_ID
                    WHERE C.CID = 'C1';  



--○ 자유게시판 컨텐츠 신고
SELECT F.B_ID "신고당한콘텐츠코드", F.MID "신고한회원코드"
, FN_FREE_B_REP_R_NAME(F.R_REASON_ID) "신고처리사유코드"
, FN_FREE_B_REP_R_NAME(F.P_REASON_ID) "처리사유코드", FFC.CONTENT "기타사유신고콘텐츠" , SFC.CONTENT "기타사유처리콘텐츠" 
FROM FREE_B_REP F
LEFT JOIN FREE_B B
ON B.B_ID = F.B_ID
    LEFT JOIN MEMBER M
        ON M.MID = F.MID
            LEFT JOIN FREE_B_REP_ETC FFC
                ON F.REP_ID = FFC.REP_ID
                    LEFT JOIN FREE_B_PRO_ETC SFC
                        ON F.REP_ID = SFC.REP_ID;
                        
--○ 정모 평가 뷰 
CREATE OR REPLACE VIEW BEE_EVAL_VIEW
AS
SELECT BEE_EVAL.BEE_EVAL_ID, BEE_EVAL.REQ_ID, BEE_EVAL.SCORE, BEE_EVAL.CONTENT
, BEE_EVAL.BDATE, BEE_REQ.CLUBMEM_ID, BEE_REQ.BEE_ID
, FN_CLUBMEMBER_NICKNAME(BEE_REQ.CLUBMEM_ID) AS "NICKNAME"
FROM BEE_EVAL LEFT JOIN BEE_REQ
ON BEE_EVAL.REQ_ID = BEE_REQ.REQ_ID;

-- 동아리 가입 회원 정보 뷰
CREATE OR REPLACE VIEW CLUBMEMBER_SHOW_VIEW
AS
SELECT C.CID "동아리 코드", C.MAX "최대 인원", C.CONTENT "내용", C.CATEGORY_S_ID "동아리 카테고리", RL.REGION_L_ID "지역(시) 코드", C.REGION_S_ID "지역(군/구) 코드"
, RL.CITY "지역 대분류", S.LOCAL "지역 세부"
, C.MID "동아리장코드", C.TITLE "동아리명", C.URL "대표사진경로", C.PREOPENDATE "가개설일", C.BDATE "정식개설일"
, C.LIMIT_ID "지역제한", C.AGELIMIT_ID "나이제한", J.JOIN_ID "가입신청코드"
, L.CLUBMEM_ID "회원목록코드", L.POSITION_ID "직위코드", P.NAME "직위명"
FROM CLUB C LEFT JOIN JOIN_CLUB J -- 동아리 + 가입 신청
ON C.CID = J.CID
    LEFT JOIN CLUBMEMBERLIST L    -- 동아리 + 가입 신청 + 동아리 회원목록
    ON J.JOIN_ID = L.JOIN_ID
        LEFT JOIN REGION_S S
        ON S.REGION_S_ID = C.REGION_S_ID
            LEFT JOIN REGION_L RL
            ON S.REGION_L_ID = RL.REGION_L_ID
                LEFT JOIN POSITION P
                ON L.POSITION_ID = P.POSITION_ID;
--==>> View CLUBMEMBER_SHOW_VIEW이(가) 생성되었습니다.


--모임: ID와 cid(동아리코드)로 회원의 동아리회원목록코드 얻는 뷰
CREATE OR REPLACE VIEW SEARCH_CLUBMEM_ID_VIEW
AS
SELECT C.CLUBMEM_ID "CLUBMEM_ID", I.ID "ID", J.CID "CID", C.POSITION_ID "POSITION_ID" FROM MEMBERINFO I LEFT JOIN MEMBER M ON I.MID = M.MID LEFT JOIN JOIN_CLUB J ON J.MID = M.MID
LEFT JOIN CLUBMEMBERLIST C ON C.JOIN_ID = J.JOIN_ID



CREATE OR REPLACE VIEW CLUBVIEW
AS
SELECT C.CID
, C.MAX
, C.BDATE
, C.CONTENT
, C.CATEGORY_S_ID
, (SELECT S_CAT FROM CATEGORY_S WHERE CATEGORY_S_ID = C.CATEGORY_S_ID) "S_CAT"
, C.REGION_S_ID
, (SELECT LOCAL FROM REGION_S WHERE REGION_S_ID = C.REGION_S_ID) "LOCAL"
, C.MID
, C.URL
, C.TITLE
, C.PREOPENDATE
, C.AGELIMIT_ID
, C.LIMIT_ID
, F.ID
FROM CLUB C LEFT JOIN JOIN_CLUB J
ON C.CID = J.CID
    LEFT JOIN CLUBMEMBERLIST CL
    ON CL.JOIN_ID = J.JOIN_ID
        LEFT JOIN MEMBER M
        ON M.MID = J.MID
            LEFT JOIN MEMBERINFO F
            ON F.MID = M.MID;
--==>> View CLUBVIEW이(가) 생성되었습니다.

CREATE OR REPLACE VIEW CLUBVIEW2
AS
SELECT C.CID
, C.MAX
, C.BDATE
, C.CONTENT
, (SELECT CATEGORY_L_ID FROM CATEGORY_S WHERE C.CATEGORY_S_ID = CATEGORY_S_ID) "CATEGORY_L_ID"
, C.CATEGORY_S_ID
, (SELECT S_CAT FROM CATEGORY_S WHERE CATEGORY_S_ID = C.CATEGORY_S_ID) "S_CAT"
, (SELECT REGION_L_ID FROM REGION_S WHERE C.REGION_S_ID = REGION_S_ID) "REGION_L_ID"
, C.REGION_S_ID
, (SELECT LOCAL FROM REGION_S WHERE REGION_S_ID = C.REGION_S_ID) "LOCAL"
, C.MID
, C.URL
, C.TITLE
, C.PREOPENDATE
, C.AGELIMIT_ID
, C.LIMIT_ID
, F.ID
FROM CLUB C LEFT JOIN JOIN_CLUB J
ON C.CID = J.CID
    LEFT JOIN CLUBMEMBERLIST CL
    ON CL.JOIN_ID = J.JOIN_ID
        LEFT JOIN MEMBER M
        ON M.MID = J.MID
            LEFT JOIN MEMBERINFO F
            ON F.MID = M.MID
--==>> View CLUBVIEW2이(가) 생성되었습니다.

CREATE OR REPLACE VIEW CLUBVIEW3
AS
SELECT CID
, MAX
, BDATE
, CONTENT
, CATEGORY_L_ID
, (SELECT L_CAT FROM CATEGORY_L WHERE CATEGORY_L_ID = CLUBVIEW2.CATEGORY_L_ID) "L_CAT"
, CATEGORY_S_ID
, S_CAT
, REGION_L_ID
, (SELECT CITY FROM REGION_L WHERE REGION_L_ID = CLUBVIEW2.REGION_L_ID) "CITY"
, REGION_S_ID
, LOCAL
, MID
, URL
, TITLE
, PREOPENDATE
, AGELIMIT_ID
, LIMIT_ID
, ID
FROM CLUBVIEW2;
--==>> View CLUBVIEW3이(가) 생성되었습니다.


CREATE OR REPLACE VIEW CLUBVIEW4
AS
SELECT CID
, MAX
, BDATE
, CONTENT
, (SELECT CATEGORY_L_ID FROM CATEGORY_S WHERE CLUB.CATEGORY_S_ID = CATEGORY_S_ID) "CATEGORY_L_ID"
, CATEGORY_S_ID
, (SELECT S_CAT FROM CATEGORY_S WHERE CATEGORY_S_ID = CLUB.CATEGORY_S_ID) "S_CAT"
, (SELECT REGION_L_ID FROM REGION_S WHERE CLUB.REGION_S_ID = REGION_S_ID) "REGION_L_ID"
, REGION_S_ID
, (SELECT LOCAL FROM REGION_S WHERE REGION_S_ID = CLUB.REGION_S_ID) "LOCAL"
, MID
, URL
, TITLE
, PREOPENDATE
, AGELIMIT_ID
, LIMIT_ID
FROM CLUB;
--==>> View CLUBVIEW4이(가) 생성되었습니다.


CREATE OR REPLACE VIEW CLUBVIEW5
AS
SELECT CID
, MAX
, BDATE
, CONTENT
, CATEGORY_L_ID
, (SELECT L_CAT FROM CATEGORY_L WHERE CATEGORY_L_ID = CLUBVIEW4.CATEGORY_L_ID) "L_CAT"
, CATEGORY_S_ID
, S_CAT
, REGION_L_ID
, (SELECT CITY FROM REGION_L WHERE REGION_L_ID = CLUBVIEW4.REGION_L_ID) "CITY"
, REGION_S_ID
, LOCAL
, MID
, URL
, TITLE
, PREOPENDATE
, AGELIMIT_ID
, LIMIT_ID
FROM CLUBVIEW4;
--==>> View CLUBVIEW5이(가) 생성되었습니다.




-- 실제 열린 모임
CREATE OR REPLACE VIEW BEEVIEW                                                                                          --1219
AS
SELECT BEE_ID
     , TYPE_ID
     , (SELECT TYPE FROM BEE_TYPE WHERE BEE_TYPE.TYPE_ID = BEE.TYPE_ID) AS TYPENAME
     , TITLE
     , CONTENT
     , TO_CHAR(BEE_TIME, 'YYYY-MM-DD HH24:MI:SS') AS BEETIME
     , WEATHER
     , LOCATION
     , MIN 
     , MAX 
     , FEE 
     , BDATE 
     , CLUBMEM_ID  -- 작성자
     , FN_CLUBMEMBER_NICKNAME(CLUBMEM_ID) AS NICKNAME
     , FN_CLUBMEMBER_NAME(CLUBMEM_ID) AS WRITER
     , (SELECT COUNT(*) FROM BEE_REQ WHERE BEE_REQ.BEE_ID = BEE.BEE_ID AND REQ_ID NOT IN (SELECT REQ_ID FROM ABSENT)) AS REQCNT
FROM BEE


-- 동아리코드로 모임 찾기 위한 뷰
CREATE OR REPLACE VIEW CLUBBEEVIEW
AS
SELECT B.BEE_ID
     , B.TYPE_ID
     , B.TYPENAME
     , B.TITLE
     , B.CONTENT
     , B.BEETIME
     , B.WEATHER
     , B.LOCATION
     , B.MIN 
     , B.MAX 
     , B.FEE 
     , B.BDATE 
     , B.CLUBMEM_ID  -- 작성자
     , B.NICKNAME
     , B.WRITER
     , B.REQCNT
     , B.CLUB.CID
     , J.JOIN_ID
FROM BEEVIEW B LEFT JOIN CLUBMEMBERLIST C 
ON B.CLUBMEM_ID = C.CLUBMEM_ID
    LEFT JOIN JOIN_CLUB J 
    ON J.JOIN_ID = C.JOIN_ID
        LEFT JOIN CLUB
        ON CLUB.CID = J.CID;
--==>> View CLUBBEEVIEW이(가) 생성되었습니다.



-- 모임 참가자(불참 신청 테이블에 있는 회원 제외)
CREATE OR REPLACE VIEW REQBEEVIEW
AS
SELECT FN_CLUBMEMBER_NICKNAME(CLUBMEM_ID) AS NICKNAME, REQ_ID, CLUBMEM_ID, BEE_ID, BDATE FROM BEE_REQ WHERE REQ_ID NOT IN (SELECT REQ_ID FROM ABSENT);




-- 회원 테이블 시퀀스 최대값 출력
CREATE OR REPLACE VIEW MAXMID_VIEW
AS
SELECT MAX(TO_NUMBER(SUBSTR(MID, 2))) "MAXMID" FROM MEMBER;



-- 동아리별 회원 수 출력
CREATE OR REPLACE VIEW CLUBMEM_COUNT_VIEW
AS
SELECT COUNT(*) COUNT, C.CID
FROM CLUB C LEFT JOIN JOIN_CLUB JC
ON C.CID = JC.CID
    LEFT JOIN CLUBMEMBERLIST L
    ON L.JOIN_ID = JC.JOIN_ID
        WHERE L.CLUBMEM_ID NOT IN (SELECT CLUBMEM_ID FROM BAN_MEM_LIST) AND L.CLUBMEM_ID NOT IN (SELECT CLUBMEM_ID FROM DROP_CLUB)
        GROUP BY C.CID;


-- 동아리코드로 동아리 회원 정보 출력
CREATE OR REPLACE VIEW CLUBMEM_CID_VIEW
AS
SELECT C.CID AS CID, L.CLUBMEM_ID AS CLUBMEM_ID, FN_CLUBMEMBER_NICKNAME(L.CLUBMEM_ID) AS NICKNAME
FROM CLUB C LEFT JOIN JOIN_CLUB JC
ON C.CID = JC.CID
    LEFT JOIN CLUBMEMBERLIST L
    ON L.JOIN_ID = JC.JOIN_ID
        WHERE L.CLUBMEM_ID NOT IN (SELECT CLUBMEM_ID FROM BAN_MEM_LIST) AND L.CLUBMEM_ID NOT IN (SELECT CLUBMEM_ID FROM DROP_CLUB); 


-------------------------------------------------------------------------------------
--● 회계 관련 뷰(VIEW) 생성


--○ 동아리의 계좌 CLUB_ACCOUNT_VIEW
CREATE OR REPLACE VIEW CLUB_ACCOUNT_VIEW
AS
SELECT B.CID AS CID, B.TITLE AS "동아리명"
      ,A.ACCOUNT_ID AS ACCOUNT_ID, A.NAME AS "통장명(NAME)", A.NUM AS "계좌번호(NUM)"
      ,A.INIT AS "초기잔고(INIT)"
      ,A.CLUBMEM_ID AS 예금주,I.NAME AS "예금주명"
FROM ACCOUNT A LEFT JOIN CLUBMEMBERLIST L
  ON A.CLUBMEM_ID = L.CLUBMEM_ID
  LEFT JOIN JOIN_CLUB J
  ON L.JOIN_ID = J.JOIN_ID
  LEFT JOIN CLUB B
  ON J.CID = B.CID
  LEFT JOIN MEMBER M
  ON J.MID = M.MID
  LEFT JOIN MEMBERINFO I
  ON M.MID = I.MID;

--View CLUB_ACCOUNT_VIEW이(가) 생성되었습니다.

SELECT * 
FROM CLUB_ACCOUNT_VIEW
WHERE CID = 'C1';
/*
C1	캠핑 러버들의 모임	1	신한종합통장	110-530-731587	0	CM6	박민준
*/
  
--○ 동아리의 계좌 카드까지 나오게 CLUB_ACCOUNT_VIEW2
CREATE OR REPLACE VIEW CLUB_ACCOUNT_VIEW2
AS
SELECT B.CID AS CID, B.TITLE AS "동아리명"
      ,A.ACCOUNT_ID AS ACCOUNT_ID, A.NAME AS "통장명(NAME)", A.NUM AS "계좌번호(NUM)"
      ,A.INIT AS "초기잔고(INIT)"
      ,A.CLUBMEM_ID AS 예금주,I.NAME AS "예금주명"
      , C.CARD_ID, C.NAME AS "카드명"
FROM ACCOUNT A LEFT JOIN CARD C
  ON A.ACCOUNT_ID = C.ACCOUNT_ID
  LEFT JOIN CLUBMEMBERLIST L
  ON A.CLUBMEM_ID = L.CLUBMEM_ID
  LEFT JOIN JOIN_CLUB J
  ON L.JOIN_ID = J.JOIN_ID
  LEFT JOIN CLUB B
  ON J.CID = B.CID
  LEFT JOIN MEMBER M
  ON J.MID = M.MID
  LEFT JOIN MEMBERINFO I
  ON M.MID = I.MID;
--View CLUB_ACCOUNT_VIEW2이(가) 생성되었습니다.

SELECT * 
FROM CLUB_ACCOUNT_VIEW2
WHERE CID = 'C1';
/*
C1	캠핑 러버들의 모임	1	신한종합통장	110-530-731587	0	CM6	박민준	1	신한체크
C1	캠핑 러버들의 모임	1	신한종합통장	110-530-731587	0	CM6	박민준	2	노리체크
*/


--○ 회계부 수입 VIEW --- 이름, 닉네임 추가 필요
CREATE OR REPLACE VIEW CLUB_INCOME_VIEW
AS
SELECT I.INCOME_ID AS "수입코드", B.CID, B.TITLE AS "동아리명"
     ,I.PRICE, I.INCOME_DATE AS "입금일자", I.PAYER AS "입금자", T.TYPE AS "분류" , I.CONTENT AS "비고"
     ,I.BDATE AS "작성일자" , I.CLUBMEM_ID AS "작성자", I.ACCOUNT_ID , A.NAME, F.YEAR||'/'|| F.MONTH AS "회비 년/월"
FROM INCOME I LEFT JOIN INCOME_TYPE T
  ON I.TYPE_ID = T.TYPE_ID
  LEFT JOIN ACCOUNT A
  ON I.ACCOUNT_ID = A.ACCOUNT_ID
  LEFT JOIN FEE F
  ON I.INCOME_ID = F.INCOME_ID
  LEFT JOIN CLUBMEMBERLIST C
  ON I.PAYER = C.CLUBMEM_ID
  LEFT JOIN CLUBMEMBERLIST C2
  ON I.CLUBMEM_ID = C2.CLUBMEM_ID
  LEFT JOIN JOIN_CLUB J
  ON C.JOIN_ID = J.JOIN_ID 
  LEFT JOIN CLUB B
  ON J.CID = B.CID;


--○ 회계부 지출 VIEW -- 와이리 지저분할까요...ㅎ
CREATE OR REPLACE VIEW CLUB_EXPENSE_VIEW
AS
SELECT E.EXPENSE_ID AS "지출코드",C.CID,C.TITLE AS "동아리명", E.PRICE, E.EXPENSE_DATE AS "지출일자"
     , T.TYPE AS "분류" , TD.TYPE AS "세부내역", E.CONTENT AS "비고" 
     , E.BDATE AS "작성일자",E.CLUBMEM_ID, I.NAME AS "작성자명",
     EA.ACCOUNT_ID AS "계좌코드", A.NAME AS "통장명"
     ,EC.CARD_ID AS "카드코드" , D.NAME AS "카드명"
FROM EXPENSE E LEFT JOIN EXPENSE_ACCOUNT EA
    ON E.EXPENSE_ID = EA.EXPENSE_ID
    LEFT JOIN EXPENSE_CARD EC
    ON E.EXPENSE_ID = EC.EXPENSE_ID
    LEFT JOIN ACCOUNT A 
    ON EA.ACCOUNT_ID = A.ACCOUNT_ID
    LEFT JOIN CARD D
    ON EC.CARD_ID = D.CARD_ID
    LEFT JOIN EXPENSE_TYPE_D TD
    ON E.TYPE_D_ID = TD.TYPE_D_ID
    LEFT JOIN EXPENSE_TYPE T
    ON TD.TYPE_ID = T.TYPE_ID
    LEFT JOIN CLUBMEMBERLIST L
    ON E.CLUBMEM_ID = L.CLUBMEM_ID
    LEFT JOIN JOIN_CLUB J
    ON L.JOIN_ID = J.JOIN_ID
    LEFT JOIN CLUB C
    ON J.CID = C.CID
    LEFT JOIN MEMBER M
    ON J.MID = M.MID
    LEFT JOIN MEMBERINFO I
    ON M.MID = I.MID;

--------------------------------------------------------------------------------------------------
--● 결산 VIEW

--총 결산------------------------------------------------------------------------------------

-- 총 결산 당일 정모 횟수
CREATE OR REPLACE VIEW MAIN_BEE_COUNT_VIEW
AS
SELECT COUNT(DISTINCT B.BEE_ID) "정모 횟수"
FROM BEE B
LEFT JOIN BEE_REQ BR
ON B.BEE_ID = BR.BEE_ID
LEFT JOIN BEE_TYPE BT ON B.TYPE_ID = BT.TYPE_ID
WHERE B.TYPE_ID = '1' AND TO_CHAR(B.BEE_TIME) = TO_CHAR(SYSDATE,'YYYY-MM-DD');



-- 신규 당일 동아리 수
SELECT COUNT(*) "당일 신규 동아리  수"
FROM CLUB
WHERE TO_CHAR(BDATE) = TO_CHAR(SYSDATE, 'YYYY-MM-DD');

-- 신규 당일 가입자 수
SELECT COUNT(*) "당일 신규 가입자 수"
FROM MEMBER
WHERE TO_CHAR(BDATE)=TO_CHAR(SYSDATE,'YYYY-MM-DD');

-- 막대 그래프 - 표현하기 위한 회원수 날짜별(누적)

SELECT DISTINCT(SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE,'YYYY-MM-DD')) <=30) "최근 1개월 회원 수" ,
        (SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE,'YYYY-MM-DD')) <=60) "최근 2개월 회원 수",
        (SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE,'YYYY-MM-DD')) <=90) "최근 3개월 회원 수",
        (SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE,'YYYY-MM-DD')) <=120) "최근 4개월 회원 수",
        (SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE,'YYYY-MM-DD')) <=150) "최근 5개월 회원 수",
        (SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE,'YYYY-MM-DD')) <=180) "최근 6개월 회원 수"
FROM MEMBER;

SELECT ROUND(TO_DATE(SYSDATE) - TO_DATE('2020-12-26','YYYY-MM-DD'))
FROM DUAL;

-- 선 그래프 - 증감률을 보여주기 위한 막대그래프 값
SELECT DISTINCT(SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=30) "최근 1개월 회원 수" ,
        (SELECT COUNT(*) FROM MEMBER WHERE 30 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=60) "최근 2개월 회원 수",
        (SELECT COUNT(*) FROM MEMBER WHERE 60 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=90) "최근 3개월 회원 수",
        (SELECT COUNT(*) FROM MEMBER WHERE 90 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=120) "최근 4개월 회원 수",
        (SELECT COUNT(*) FROM MEMBER WHERE 120 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=150) "최근 5개월 회원 수",
        (SELECT COUNT(*) FROM MEMBER WHERE 150 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=180) "최근 6개월 회원 수"
FROM MEMBER;



-- 증감률 계산을 위한 뷰
CREATE OR REPLACE FUNCTION FN_MEMBER_PERCHAN(V_STAN NUMBER, V_COMP NUMBER)
RETURN NUMBER
IS
    V_CNT NUMBER;
BEGIN
 
    IF(V_STAN = 0) THEN
    V_CNT := -1;
    ELSE
    V_CNT := ((V_COMP-V_STAN)/V_STAN)*100;
    END IF;
    
    RETURN V_CNT;
END;



-- 회원 증감률 꺾은선 그래프를 위한 함수 FN_MEMBER_PERCHAN
SELECT FN_MEMBER_PERCHAN((SELECT COUNT(*) FROM MEMBER WHERE BDATE=SYSDATE),(SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=30)) "0_1Month"
,FN_MEMBER_PERCHAN((SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=30),
(SELECT COUNT(*) FROM MEMBER WHERE 30 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=60)) "1_2Month"
,FN_MEMBER_PERCHAN((SELECT COUNT(*) FROM MEMBER WHERE 30 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=60),
(SELECT COUNT(*) FROM MEMBER WHERE 60 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <= 90)) "2_3Month"
,FN_MEMBER_PERCHAN((SELECT COUNT(*) FROM MEMBER WHERE 60 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=90),
(SELECT COUNT(*) FROM MEMBER WHERE 90 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <= 120)) "3_4Month"
,FN_MEMBER_PERCHAN((SELECT COUNT(*) FROM MEMBER WHERE 90 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=120),
(SELECT COUNT(*) FROM MEMBER WHERE 120 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <= 150)) "4_5Month"
,FN_MEMBER_PERCHAN((SELECT COUNT(*) FROM MEMBER WHERE 120 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=150),
(SELECT COUNT(*) FROM MEMBER WHERE 150 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <= 180)) "5_6Month"
FROM DUAL;

,FN_MEMBER_PERCHAN((SELECT COUNT(*) FROM MEMBER WHERE 90 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=120)
,(SELECT COUNT(*) FROM MEMBER WHERE 120 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=150)) "4_5Month"

,FN_MEMBER_PERCHAN((SELECT COUNT(*) FROM MEMBER WHERE 120 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=150),
(SELECT COUNT(*) FROM MEMBER WHERE 150 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=180)) "5_6Month"
FROM DUAL;

SELECT COUNT(*) FROM MEMBER WHERE BDATE=SYSDATE


SELECT (DISTINCT(SELECT COUNT(*) FROM MEMBER WHERE ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=30)-SELECT COUNT(*) FROM MEMBER WHERE BDATE=SYSDATE)
FROM MEMBER;



------------------------------------------------------------------------------------총 결산--


------------------------------------------------------------------------------------총 결산 카테고리
 

-- 카테고리별 결산---------------------------------------------------------------------

-- 카테고리(대분류)별 동아리원 수---------------------------------------------------------
SELECT (SELECT COUNT(*) 
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE))<=30) "카테고리1개월회원수"
, (SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <30 AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE))<=60) "카테고리2개월회원수"
, (SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <60 AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE))<=90) "카테고리3개월회원수"
, (SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <90 AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE))<=120) "카테고리4개월회원수"
, (SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <120 AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE))<=150) "카테고리5개월회원수"
, (SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <150 AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE))<=180) "카테고리6개월회원수"
FROM DUAL;

 
------------------------------------------------------------------------- 카테고리(대분류)별 동아리원 수







-- 카테고리별 동아리원 수 증가율
----------------------------------------------------------------------------------------------------------------------------------------------

SELECT FN_MEMBER_PERCHAN((SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND BDATE=SYSDATE),(SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=30)) "0_1Month"
,FN_MEMBER_PERCHAN((SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=30),(SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND 30 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=60)) "1_2Month"
, FN_MEMBER_PERCHAN((SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND 30 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=60),(SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND 60 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=90)) "2_3Month"
, FN_MEMBER_PERCHAN((SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND 60 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=90),(SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND 90 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=120)) "3_4Month"
, FN_MEMBER_PERCHAN((SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND 90 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=120),(SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND 120 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=150)) "4_5Month"
, FN_MEMBER_PERCHAN((SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND 120 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=150),(SELECT COUNT(*)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND 150 < ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=180)) "5_6Month"
FROM DUAL;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--  카테고리별 신규(당일) 가입자 수
SELECT COUNT(*) CATCOUNT
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND BDATE=SYSDATE;
                    



                    
-- 카테고리별 정모기준 평균 회비 뷰 

CREATE OR REPLACE VIEW PERCATEGORY
AS
SELECT TYPE_ID, FEE, CA.CATEGORY_L_ID
FROM BEE B
LEFT JOIN CLUBMEMBERLIST C ON B.CLUBMEM_ID = C.CLUBMEM_ID
LEFT JOIN JOIN_CLUB JC ON C.JOIN_ID = JC.JOIN_ID
LEFT JOIN CLUB CL ON JC.CID = CL.CID
LEFT JOIN CATEGORY_S C ON CL.CATEGORY_S_ID = C.CATEGORY_S_ID
LEFT JOIN CATEGORY_L CA ON C.CATEGORY_L_ID = CA.CATEGORY_L_ID;
--==>> View PERCATEGORY이(가) 생성되었습니다.

--== -- 카테고리별 정모기준 평균 회비 SELECT
SELECT NVL(ROUND(SUM(FEE)/COUNT(*)),0) AVG_MONEY
FROM PERCATEGORY
WHERE CATEGORY_L_ID='1' AND TYPE_ID='1' WHERE ;

SELECT BEE_ID
     , TYPE_ID
     , TYPENAME
     , TITLE
     , CONTENT
     , BEETIME
     , WEATHER
     , LOCATION
     , MIN 
     , MAX 
     , FEE 
     , BDATE 
     , CLUBMEM_ID  -- 작성자
     , NICKNAME
     , WRITER
     , REQCNT -- 신청자수
FROM BEEVIEW
WHERE (TO_DATE(BEETIME, 'YYYY-MM-DD HH24:MI:SS') < SYSDATE AND MIN < REQCNT) AND TYPE_ID = '1'
ORDER BY TO_NUMBER(BEE_ID) DESC;

SELECT B.BEE_ID
     , B.TYPE_ID
     , B.FEE 
     , B.CLUBMEM_ID  -- 작성자
     , C.CATEGORY_S_ID
     , CL.CATEGORY_L_ID
FROM BEEVIEW B LEFT JOIN CLUBMEMBERLIST L
ON L.CLUBMEM_ID = B.CLUBMEM_ID
    LEFT JOIN JOIN_CLUB JC
    ON JC.JOIN_ID = L.JOIN_ID
        LEFT JOIN CLUB C
        ON C.CID = JC.CID
            LEFT JOIN CATEGORY_S CS
            ON CS.CATEGORY_S_ID = C.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL
                ON CS.CATEGORY_L_ID = CL.CATEGORY_L_ID
WHERE (TO_DATE(B.BEETIME, 'YYYY-MM-DD HH24:MI:SS') < SYSDATE AND MIN < B.REQCNT) AND B.TYPE_ID = '1'
ORDER BY TO_NUMBER(B.BEE_ID) DESC;

-- 사이트 생성 이후 총 정모 수
SELECT COUNT(*) "총 정모수"
FROM BEE B
LEFT JOIN CLUBMEMBERLIST C ON B.CLUBMEM_ID = C.CLUBMEM_ID
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON CL.CID = J.CID
            LEFT JOIN CATEGORY_S CS ON CS.CATEGORY_S_ID = CL.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_L_ID
                    WHERE B.TYPE_ID = '1' AND CS.CATEGORY_L_ID='1';


-- 카테고리별 막대 그래프 - 회원수(레이블 : 동아리회원 수)
SELECT DISTINCT(SELECT COUNT(DISTINCT CL.CID)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='1' AND ROUND(TO_DATE(SYSDATE) - TO_DATE(BDATE)) <=30) "최근 1개월 회원 수" ,
        (SELECT COUNT(DISTINCT CL.CID)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <=60) "최근 2개월 회원 수",
        (SELECT COUNT(DISTINCT CL.CID)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <=90) "최근 3개월 회원 수",
        (SELECT COUNT(DISTINCT CL.CID)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <=120) "최근 4개월 회원 수",
        (SELECT COUNT(DISTINCT CL.CID)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <=150) "최근 5개월 회원 수",
        (SELECT COUNT(DISTINCT CL.CID)
FROM CLUBMEMBERLIST C
    LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = J.JOIN_ID
        LEFT JOIN CLUB CL ON J.CID=CL.CID
            LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                LEFT JOIN CATEGORY_L CL ON CL.CATEGORY_L_ID = CS.CATEGORY_S_ID
                    WHERE CL.CATEGORY_L_ID='3' AND ROUND(TO_DATE(SYSDATE)-TO_DATE(BDATE)) <=180) "최근 6개월 회원 수"
FROM DUAL;

-- 카테고리별 총 정모수

SELECT B.BEE_ID
     , B.TYPE_ID
     , B.TYPENAME
     , B.TITLE
     , B.CONTENT
     , B.BEETIME
     , B.WEATHER
     , B.LOCATION
     , B.MIN 
     , B.MAX 
     , B.FEE 
     , B.BDATE 
     , B.CLUBMEM_ID  -- 작성자
     , B.NICKNAME
     , B.WRITER
     , B.REQCNT -- 신청자수
FROM BEEVIEW B
    LEFT JOIN CLUBMEMBERLIST C ON B.CLUBMEM_ID = C.CLUBMEM_ID
        LEFT JOIN JOIN_CLUB J ON J.JOIN_ID = C.JOIN_ID
            LEFT JOIN CLUB CL ON CL.CID = J.CID
                LEFT JOIN CATEGORY_S CS ON CL.CATEGORY_S_ID = CS.CATEGORY_S_ID
                    LEFT JOIN CATEGORY_L CAL ON CAL.CATEGORY_L_ID = CS.CATEGORY_S_ID
WHERE (TO_DATE(B.BEETIME, 'YYYY-MM-DD HH24:MI:SS') < SYSDATE AND MIN < B.REQCNT) AND TYPE_ID = '1' AND CAL.CATEGORY_L_ID ='3'
ORDER BY TO_NUMBER(B.BEE_ID) DESC;


SELECT *
FROM INCOME;

--------------------------------------------------------------------------------------------------총 결산 카테고리 -> 만남지역 TOP 5남음


--동아리 결산------------------------------------------------------------------------------------

---------------------------------------------------------------------------------동아리별정모횟수

-- 동아리별정모횟수 1개월
SELECT COUNT(DISTINCT (B.BEE_ID)) "최근 1달정모횟수"
FROM BEEVIEW B
    LEFT JOIN CLUBMEMBERLIST C ON B.CLUBMEM_ID = C.CLUBMEM_ID
        LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = C.JOIN_ID
            LEFT JOIN CLUB CL ON J.CID = CL.CID 
WHERE (TO_DATE(B.BEETIME, 'YYYY-MM-DD HH24:MI:SS') < SYSDATE AND MIN < B.REQCNT) AND TYPE_ID = '1' AND CL.CID = 'C1'
AND ROUND(TO_DATE(SYSDATE)-TO_DATE(B.BEETIME,'YYYY-MM-DD HH24:MI:SS')) <=30;

-- 동아리별정모횟수 3개월
SELECT COUNT(DISTINCT (B.BEE_ID)) "최근 3달정모횟수"
FROM BEEVIEW B
    LEFT JOIN CLUBMEMBERLIST C ON B.CLUBMEM_ID = C.CLUBMEM_ID
        LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = C.JOIN_ID
            LEFT JOIN CLUB CL ON J.CID = CL.CID 
WHERE (TO_DATE(B.BEETIME, 'YYYY-MM-DD HH24:MI:SS') < SYSDATE AND MIN < B.REQCNT) AND TYPE_ID = '1' AND CL.CID = 'C1'
AND ROUND(TO_DATE(SYSDATE)-TO_DATE(B.BEETIME,'YYYY-MM-DD HH24:MI:SS')) <=90;
 
-- 동아리별정모횟수 6개월
SELECT COUNT(DISTINCT (B.BEE_ID)) "최근 6달정모횟수"
FROM BEEVIEW B
    LEFT JOIN CLUBMEMBERLIST C ON B.CLUBMEM_ID = C.CLUBMEM_ID
        LEFT JOIN JOIN_CLUB J ON C.JOIN_ID = C.JOIN_ID
            LEFT JOIN CLUB CL ON J.CID = CL.CID 
WHERE (TO_DATE(B.BEETIME, 'YYYY-MM-DD HH24:MI:SS') < SYSDATE AND MIN < B.REQCNT) AND TYPE_ID = '1' AND CL.CID = 'C1'
AND ROUND(TO_DATE(SYSDATE)-TO_DATE(B.BEETIME,'YYYY-MM-DD HH24:MI:SS')) <=180;

--동아리별정모횟수--------------------------------------------------------------------------------

----------------------------------------------------------------------------------정모 평가 개수--



--정모 평가 개수----------------------------------------------------------------------------------


-- 최근 1개월 내 정모평가 개수
SELECT COUNT(BE.REQ_ID)
FROM BEE_EVAL BE
    LEFT JOIN BEE_REQ BR ON BR.REQ_ID = BE.REQ_ID
        LEFT JOIN BEE B ON B.BEE_ID = BR.BEE_ID
            WHERE ROUND(TO_DATE(B.BEE_TIME)-TO_DATE(SYSDATE)) <=33;

-- 최근 3개월 내 정모평가 개수
SELECT COUNT(BE.REQ_ID)
FROM BEE_EVAL BE
    LEFT JOIN BEE_REQ BR ON BR.REQ_ID = BE.REQ_ID
        LEFT JOIN BEE B ON B.BEE_ID = BR.BEE_ID
            WHERE ROUND(TO_DATE(B.BEE_TIME)-TO_DATE(SYSDATE)) <=93;

-- 최근 6개월 내 정모평가 개수
SELECT COUNT(BE.REQ_ID)
FROM BEE_EVAL BE
    LEFT JOIN BEE_REQ BR ON BR.REQ_ID = BE.REQ_ID
        LEFT JOIN BEE B ON B.BEE_ID = BR.BEE_ID
            WHERE ROUND(TO_DATE(B.BEE_TIME)-TO_DATE(SYSDATE)) <=183;            

-- 정모 기준 인당 평균 회비

SELECT *
FROM INCOME I
    LEFT JOIN CLUBMEMBERLIST C ON I.PAYER = C.CLUBMEM_ID
        LEFT JOIN BEE B ON B.CLUBMEM_ID = C.CLUBMEM_ID
            LEFT JOIN BEE_REQ BR ON B.BEE_ID = BR.BEE_ID
                LEFT JOIN BEE_EVAL BE ON BR.REQ_ID = BE.REQ_ID ORDER BY I.INCOME_ID;
                

SELECT AVG(B.FEE)
FROM BEEVIEW B
    LEFT JOIN CLUBMEMBERLIST C ON B.CLUBMEM_ID = C.CLUBMEM_ID 
WHERE (TO_DATE(B.BEETIME, 'YYYY-MM-DD HH24:MI:SS') < SYSDATE AND MIN < B.REQCNT) AND B.TYPE_ID = '1' AND C.CID='1'
ORDER BY TO_NUMBER(B.BEE_ID) DESC;              


